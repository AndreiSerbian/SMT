
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.0";
import { Resend } from "npm:resend@1.0.0";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Resend –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
const GOOGLE_SHEETS_ID = Deno.env.get("GOOGLE_SHEETS_ID");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_TOKEN") || "";
const TELEGRAM_CHAT_ID = Deno.env.get("TELEGRAM_CHAT_ID") || "";

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function generateOrderConfirmationEmail(order: any) {
  const { id, name, cart_items, subtotal, discount, total } = order;
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const cartItemsHtml = cart_items.map((item: any) => `
    <tr>
      <td style="padding: 10px; border: 1px solid #ddd;">${item.name}</td>
      <td style="padding: 10px; border: 1px solid #ddd;">${item.artikul || '–ù/–î'}</td>
      <td style="padding: 10px; border: 1px solid #ddd;">${item.quantity}</td>
      <td style="padding: 10px; border: 1px solid #ddd;">${item.price} ‚ÇΩ</td>
      <td style="padding: 10px; border: 1px solid #ddd;">${item.quantity * item.price} ‚ÇΩ</td>
    </tr>
  `).join('');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º PUBLIC_SITE_URL –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–ª–∏ fallback –Ω–∞ supabaseUrl
  const baseUrl = Deno.env.get("PUBLIC_SITE_URL") || supabaseUrl;

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –≤—Å–µ–≥–æ –ø–∏—Å—å–º–∞
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th { background-color: #f2f2f2; text-align: left; padding: 10px; border: 1px solid #ddd; }
        .total { font-weight: bold; }
        .button { display: inline-block; background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ${id}</h1>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–∏–∂–µ:</p>
        
        <table>
          <thead>
            <tr>
              <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
              <th>–ê—Ä—Ç–∏–∫—É–ª</th>
              <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
              <th>–¶–µ–Ω–∞ –∑–∞ —à—Ç.</th>
              <th>–ò—Ç–æ–≥–æ</th>
            </tr>
          </thead>
          <tbody>
            ${cartItemsHtml}
          </tbody>
          <tfoot>
            <tr>
              <td colspan="4" class="total" style="text-align: right; padding: 10px; border: 1px solid #ddd;">–ü–æ–¥—ã—Ç–æ–≥:</td>
              <td style="padding: 10px; border: 1px solid #ddd;">${subtotal} ‚ÇΩ</td>
            </tr>
            <tr>
              <td colspan="4" class="total" style="text-align: right; padding: 10px; border: 1px solid #ddd;">–°–∫–∏–¥–∫–∞:</td>
              <td style="padding: 10px; border: 1px solid #ddd;">${discount || 0} ‚ÇΩ</td>
            </tr>
            <tr>
              <td colspan="4" class="total" style="text-align: right; padding: 10px; border: 1px solid #ddd;">–ò—Ç–æ–≥–æ:</td>
              <td style="padding: 10px; border: 1px solid #ddd;">${total} ‚ÇΩ</td>
            </tr>
          </tfoot>
        </table>
        
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
        <a href="${baseUrl}/functions/v1/order-confirmation?order_id=${id}" class="button" style="display: inline-block; background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑</a>
        
        <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.</p>
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
      </div>
    </body>
    </html>
  `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(message: string) {
  try {
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.log("Telegram notification skipped: Missing token or chat ID");
      return { skipped: true, reason: "Missing token or chat ID" };
    }

    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: "Markdown"
      })
    });
    
    const result = await response.json();
    console.log("Telegram notification sent:", result);
    return result;
  } catch (error) {
    console.error("Error sending Telegram notification:", error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
async function updateGoogleSheets(order: any) {
  try {
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Sheets API
    const sheetValues = [
      order.id,
      order.name,
      order.phone,
      order.email,
      order.yandex_address || "–ù–µ —É–∫–∞–∑–∞–Ω",
      order.payment || "–ù–µ —É–∫–∞–∑–∞–Ω",
      order.delivery || "–ù–µ —É–∫–∞–∑–∞–Ω",
      JSON.stringify(order.cart_items),
      order.subtotal,
      order.discount || 0,
      order.total,
      order.order_status,
      order.created_at,
      order.confirmed_at || ""
    ];

    const googleScriptUrl = Deno.env.get("GOOGLE_SCRIPT_URL");
    
    if (!googleScriptUrl || !GOOGLE_SHEETS_ID) {
      console.log("Google Sheets update skipped: Missing script URL or sheet ID");
      return { skipped: true, reason: "Missing script URL or sheet ID" };
    }
    
    const response = await fetch(googleScriptUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        sheetId: GOOGLE_SHEETS_ID,
        action: 'addOrUpdateOrder',
        orderData: sheetValues
      })
    });
    
    const result = await response.json();
    console.log("Google Sheets update result:", result);
    return result;
  } catch (error) {
    console.error("Error updating Google Sheets:", error);
    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function sendOrderConfirmationEmail(order: any) {
  try {
    const { email, name, id } = order;
    
    const data = await resend.emails.send({
      from: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ <onboarding@resend.dev>',
      to: email,
      subject: `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ${id}`,
      html: generateOrderConfirmationEmail(order),
    });
    
    console.log("Email sent successfully:", data);
    return data;
  } catch (error) {
    console.error("Error sending email:", error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  const url = new URL(req.url);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
  if (url.pathname === "/order-processing" && req.method === "POST") {
    try {
      const { orderData } = await req.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase
      const { data: order, error } = await supabase
        .from('orders')
        .insert({
          ...orderData,
          order_status: 'pending',
          created_at: new Date().toISOString()
        })
        .select()
        .single();
        
      if (error) throw error;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      const telegramMessage = `
üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*
üë§ *–ò–º—è:* ${order.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.phone}
‚úâÔ∏è *Email:* ${order.email}
üè† *–ê–¥—Ä–µ—Å:* ${order.yandex_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${order.total} ‚ÇΩ
üí≥ *–û–ø–ª–∞—Ç–∞:* ${order.payment === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–º–∏' : '–ü–µ—Ä–µ–≤–æ–¥'}
üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* ${order.delivery === 'delivery' ? '–ö—É—Ä—å–µ—Ä' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}
      `;
      
      await sendTelegramNotification(telegramMessage);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
      await updateGoogleSheets(order);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await sendOrderConfirmationEmail(order);
      
      return new Response(
        JSON.stringify({ 
          success: true, 
          message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
          order 
        }),
        { 
          headers: { 
            "Content-Type": "application/json",
            ...corsHeaders
          } 
        }
      );
    } catch (error) {
      console.error("Error processing order:", error);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: error.message 
        }),
        { 
          status: 500,
          headers: { 
            "Content-Type": "application/json",
            ...corsHeaders
          } 
        }
      );
    }
  }
  
  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
  return new Response(
    JSON.stringify({ 
      error: "Unknown route" 
    }),
    { 
      status: 404,
      headers: { 
        "Content-Type": "application/json",
        ...corsHeaders
      } 
    }
  );
});
