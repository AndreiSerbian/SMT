
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.0";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS –¥–ª—è –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_TOKEN") || "";
const TELEGRAM_CHAT_ID = Deno.env.get("TELEGRAM_CHAT_ID") || "";

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram
 * @param order - –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
 */
async function sendTelegramConfirmation(order: any) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.log("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ chat ID");
      return { skipped: true, reason: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram" };
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    const message = `
‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–ª–∏–µ–Ω—Ç–æ–º!*

üìã *–ó–∞–∫–∞–∑ ‚Ññ${order.id}*
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${order.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.phone}
‚úâÔ∏è *Email:* ${order.email}
üè† *–ê–¥—Ä–µ—Å:* ${order.yandex_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${order.total} ‚ÇΩ
üí≥ *–û–ø–ª–∞—Ç–∞:* ${order.payment === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–º–∏' : '–ü–µ—Ä–µ–≤–æ–¥–æ–º'}
üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* ${order.delivery === 'delivery' ? '–ö—É—Ä—å–µ—Ä' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}

‚è∞ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU')}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –≤ Telegram API
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: "Markdown"
      })
    });
    
    const result = await response.json();
    console.log("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", result);
    return result;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    return { error: error.message };
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ Google Sheets
 * @param order - –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
async function updateGoogleSheets(order: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Google Sheets
    const googleScriptUrl = Deno.env.get("GOOGLE_SCRIPT_URL");
    const googleSheetsId = Deno.env.get("GOOGLE_SHEETS_ID");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!googleScriptUrl || !googleSheetsId) {
      console.log("Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ ID —Ç–∞–±–ª–∏—Ü—ã");
      return { skipped: true, reason: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets" };
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets
    const sheetValues = [
      order.id,
      order.name,
      order.phone,
      order.email,
      order.yandex_address || "–ù–µ —É–∫–∞–∑–∞–Ω",
      order.payment || "–ù–µ —É–∫–∞–∑–∞–Ω",
      order.delivery || "–ù–µ —É–∫–∞–∑–∞–Ω",
      JSON.stringify(order.cart_items),
      order.subtotal,
      order.discount || 0,
      order.total,
      order.order_status,
      order.created_at,
      order.confirmed_at || ""
    ];
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –≤ Google Apps Script
    const response = await fetch(googleScriptUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        sheetId: googleSheetsId,
        action: 'addOrUpdateOrder',
        orderData: sheetValues
      })
    });
    
    const result = await response.json();
    console.log("Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", result);
    return result;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets:", error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    return { error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  if (req.method === "POST") {
    try {
      // –ü–∞—Ä—Å–∏–º JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const requestBody = await req.json();
      const { orderId } = requestBody;
      
      console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", orderId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –∑–∞–∫–∞–∑–∞
      if (!orderId) {
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: "ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω" 
          }),
          { 
            status: 400,
            headers: { 
              "Content-Type": "application/json",
              ...corsHeaders
            } 
          }
        );
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: order, error: fetchError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();
        
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      if (fetchError || !order) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", fetchError);
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" 
          }),
          { 
            status: 404,
            headers: { 
              "Content-Type": "application/json",
              ...corsHeaders
            } 
          }
        );
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ
      if (order.order_status === 'confirmed') {
        return new Response(
          JSON.stringify({ 
            success: true, 
            message: "–ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Ä–∞–Ω–µ–µ",
            order 
          }),
          { 
            headers: { 
              "Content-Type": "application/json",
              ...corsHeaders
            } 
          }
        );
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "confirmed"
      const { data: updatedOrder, error: updateError } = await supabase
        .from('orders')
        .update({ 
          order_status: 'confirmed',
          confirmed_at: new Date().toISOString()
        })
        .eq('id', orderId)
        .select()
        .single();
        
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (updateError) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", updateError);
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞" 
          }),
          { 
            status: 500,
            headers: { 
              "Content-Type": "application/json",
              ...corsHeaders
            } 
          }
        );
      }
      
      console.log("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:", updatedOrder);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –∂–¥—ë–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
      const notificationPromises = [
        sendTelegramConfirmation(updatedOrder),
        updateGoogleSheets(updatedOrder)
      ];
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      Promise.allSettled(notificationPromises).then(results => {
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", 
          results.map((r, i) => `${i}: ${r.status === 'fulfilled' ? '—É—Å–ø–µ—Ö' : r.reason}`));
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
      return new Response(
        JSON.stringify({ 
          success: true, 
          message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
          order: updatedOrder 
        }),
        { 
          headers: { 
            "Content-Type": "application/json",
            ...corsHeaders
          } 
        }
      );
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: error.message 
        }),
        { 
          status: 500,
          headers: { 
            "Content-Type": "application/json",
            ...corsHeaders
          } 
        }
      );
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  return new Response(
    JSON.stringify({ 
      error: "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" 
    }),
    { 
      status: 405,
      headers: { 
        "Content-Type": "application/json",
        ...corsHeaders
      } 
    }
  );
});
