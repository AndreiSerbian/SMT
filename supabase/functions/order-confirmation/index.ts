
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.0";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å service role –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_TOKEN") || "";
const TELEGRAM_CHAT_ID = Deno.env.get("TELEGRAM_CHAT_ID") || "";

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
 */
function generateSuccessHTML(orderNumber: string) {
  return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8fafc;
            margin: 0;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 400px;
            width: 100%;
        }
        .icon {
            font-size: 48px;
            margin-bottom: 16px;
            color: #10b981;
        }
        h1 {
            color: #1f2937;
            margin: 0 0 12px 0;
            font-size: 24px;
        }
        p {
            color: #6b7280;
            font-size: 16px;
            margin: 0 0 20px 0;
        }
        .order-info {
            background: #f3f4f6;
            padding: 16px;
            border-radius: 8px;
            font-family: monospace;
            color: #374151;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon">‚úÖ</div>
        <h1>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</h1>
        <p>–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.</p>
        <div class="order-info">–ó–∞–∫–∞–∑ ‚Ññ${orderNumber}</div>
        <p style="margin-top: 20px; font-size: 14px; color: #9ca3af;">
            –≠—Ç–æ –æ–∫–Ω–æ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å
        </p>
    </div>
</body>
</html>
  `;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π
 */
function generateErrorHTML(error: string) {
  return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—à–∏–±–∫–∞</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #fef2f2;
            margin: 0;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 400px;
            width: 100%;
        }
        .icon {
            font-size: 48px;
            margin-bottom: 16px;
            color: #ef4444;
        }
        h1 {
            color: #1f2937;
            margin: 0 0 12px 0;
            font-size: 24px;
        }
        p {
            color: #6b7280;
            font-size: 16px;
            margin: 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon">‚ùå</div>
        <h1>–û—à–∏–±–∫–∞</h1>
        <p>${error}</p>
    </div>
</body>
</html>
  `;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 */
async function sendTelegramNotification(order: any): Promise<{ success: boolean; error?: string }> {
  try {
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.log("‚ö†Ô∏è Telegram: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ");
      return { success: false, error: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" };
    }

    const message = `
‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–ª–∏–µ–Ω—Ç–æ–º!*

üìã *–ó–∞–∫–∞–∑ ‚Ññ${order.order_number || order.id}*
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${order.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.phone}
‚úâÔ∏è *Email:* ${order.email}
üí∞ *–°—É–º–º–∞:* ${order.total} ‚ÇΩ

‚è∞ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU')}
    `;

    console.log("üîî –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
    
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: "Markdown"
      })
    });
    
    if (!response.ok) {
      const errorData = await response.text();
      console.error("‚ùå Telegram API –æ—à–∏–±–∫–∞:", response.status, errorData);
      return { success: false, error: `Telegram API –æ—à–∏–±–∫–∞: ${response.status}` };
    }
    
    const result = await response.json();
    console.log("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", result.message_id);
    return { success: true };
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    return { success: false, error: error.message };
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç Google Sheets
 */
async function updateGoogleSheets(order: any): Promise<{ success: boolean; error?: string }> {
  try {
    const googleScriptUrl = Deno.env.get("GOOGLE_SCRIPT_URL");
    const googleSheetsId = Deno.env.get("GOOGLE_SHEETS_ID");
    
    if (!googleScriptUrl || !googleSheetsId) {
      console.log("‚ö†Ô∏è Google Sheets: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ");
      return { success: false, error: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" };
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
    const sheetData = [
      order.id,
      order.name || "",
      order.phone || "",
      order.email || "",
      order.yandex_address || "–ù–µ —É–∫–∞–∑–∞–Ω",
      order.payment || "–ù–µ —É–∫–∞–∑–∞–Ω",
      order.delivery || "–ù–µ —É–∫–∞–∑–∞–Ω",
      JSON.stringify(order.cart_items || []),
      order.subtotal || 0,
      order.discount || 0,
      order.total || 0,
      order.order_status || "confirmed",
      order.created_at || "",
      order.confirmed_at || new Date().toISOString()
    ];
    
    const requestBody = {
      sheetId: googleSheetsId,
      action: 'addOrUpdateOrder',
      orderData: sheetData
    };
    
    console.log("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets...");
    console.log("üìä URL:", googleScriptUrl);
    console.log("üìä –î–∞–Ω–Ω—ã–µ:", JSON.stringify(requestBody, null, 2));
    
    const response = await fetch(googleScriptUrl, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'User-Agent': 'Supabase-Edge-Function/1.0'
      },
      body: JSON.stringify(requestBody)
    });
    
    console.log("üìä Google Sheets –æ—Ç–≤–µ—Ç:", response.status, response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå Google Sheets HTTP –æ—à–∏–±–∫–∞:", response.status, errorText);
      return { success: false, error: `HTTP ${response.status}: ${errorText}` };
    }
    
    const result = await response.json();
    console.log("‚úÖ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:", result);
    return { success: true };
    
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Google Sheets:", error);
    return { success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
serve(async (req) => {
  const requestId = crypto.randomUUID().substring(0, 8);
  const timestamp = new Date().toISOString();
  
  console.log(`\nüöÄ [${requestId}] ${timestamp} - –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.url}`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
  if (req.method === "OPTIONS") {
    console.log(`‚úÖ [${requestId}] CORS preflight –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
    return new Response(null, { headers: corsHeaders });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ email)
  if (req.method === "GET") {
    try {
      const url = new URL(req.url);
      const orderId = url.searchParams.get('order_id');
      
      console.log(`üìã [${requestId}] GET –∑–∞–ø—Ä–æ—Å —Å order_id: ${orderId}`);
      
      if (!orderId) {
        console.error(`‚ùå [${requestId}] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id`);
        return new Response(
          generateErrorHTML("ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"),
          { 
            status: 400,
            headers: { 
              "Content-Type": "text/html; charset=utf-8",
              ...corsHeaders
            }
          }
        );
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
      console.log(`üîç [${requestId}] –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –≤ Supabase...`);
      const { data: order, error: fetchError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();
        
      if (fetchError || !order) {
        console.error(`‚ùå [${requestId}] –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:`, fetchError);
        return new Response(
          generateErrorHTML("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"),
          { 
            status: 404,
            headers: { 
              "Content-Type": "text/html; charset=utf-8",
              ...corsHeaders
            }
          }
        );
      }
      
      console.log(`üì¶ [${requestId}] –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω: ${order.id}, —Å—Ç–∞—Ç—É—Å: ${order.order_status}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ —É–∂–µ
      if (order.order_status === 'confirmed') {
        console.log(`‚ö†Ô∏è [${requestId}] –ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω`);
        return new Response(
          generateSuccessHTML(order.order_number || order.id),
          { 
            status: 200,
            headers: { 
              "Content-Type": "text/html; charset=utf-8",
              ...corsHeaders
            }
          }
        );
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      console.log(`üîÑ [${requestId}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞...`);
      const confirmedAt = new Date().toISOString();
      const { data: updatedOrder, error: updateError } = await supabase
        .from('orders')
        .update({ 
          order_status: 'confirmed',
          confirmed_at: confirmedAt
        })
        .eq('id', orderId)
        .select()
        .single();
        
      if (updateError || !updatedOrder) {
        console.error(`‚ùå [${requestId}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:`, updateError);
        return new Response(
          generateErrorHTML("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"),
          { 
            status: 500,
            headers: { 
              "Content-Type": "text/html; charset=utf-8",
              ...corsHeaders
            }
          }
        );
      }
      
      console.log(`‚úÖ [${requestId}] –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: ${updatedOrder.id}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
      Promise.allSettled([
        sendTelegramNotification(updatedOrder),
        updateGoogleSheets(updatedOrder)
      ]).then(results => {
        console.log(`üìä [${requestId}] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`);
        results.forEach((result, index) => {
          const service = index === 0 ? "Telegram" : "Google Sheets";
          if (result.status === 'fulfilled') {
            console.log(`‚úÖ [${requestId}] ${service}:`, result.value);
          } else {
            console.error(`‚ùå [${requestId}] ${service}:`, result.reason);
          }
        });
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
      console.log(`üéâ [${requestId}] –í–æ–∑–≤—Ä–∞—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`);
      return new Response(
        generateSuccessHTML(updatedOrder.order_number || updatedOrder.id),
        { 
          status: 200,
          headers: { 
            "Content-Type": "text/html; charset=utf-8",
            ...corsHeaders
          }
        }
      );
      
    } catch (error) {
      console.error(`üí• [${requestId}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
      return new Response(
        generateErrorHTML(`–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`),
        { 
          status: 500,
          headers: { 
            "Content-Type": "text/html; charset=utf-8",
            ...corsHeaders
          }
        }
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  console.log(`‚ùå [${requestId}] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: ${req.method}`);
  return new Response(
    generateErrorHTML("–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"),
    { 
      status: 405,
      headers: { 
        "Content-Type": "text/html; charset=utf-8",
        ...corsHeaders
      }
    }
  );
});
