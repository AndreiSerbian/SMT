
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.38.0";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS –¥–ª—è –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const TELEGRAM_BOT_TOKEN = Deno.env.get("TELEGRAM_TOKEN") || "";
const TELEGRAM_CHAT_ID = Deno.env.get("TELEGRAM_CHAT_ID") || "";

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
 * @param orderNumber - –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ ID
 * @param isAlreadyConfirmed - –ë—ã–ª –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
 */
function generateConfirmationHTML(orderNumber: string, isAlreadyConfirmed: boolean = false) {
  const title = isAlreadyConfirmed ? "–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω" : "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω";
  const message = isAlreadyConfirmed 
    ? `–ó–∞–∫–∞–∑ ‚Ññ${orderNumber} —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Ä–∞–Ω–µ–µ`
    : `–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ ‚Ññ${orderNumber} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω`;
  
  return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 500px;
            width: 100%;
        }
        .icon {
            font-size: 64px;
            margin-bottom: 20px;
            color: #22c55e;
        }
        h1 {
            color: #1f2937;
            margin-bottom: 10px;
            font-size: 24px;
        }
        p {
            color: #6b7280;
            font-size: 16px;
            line-height: 1.6;
            margin-bottom: 20px;
        }
        .order-number {
            background: #f3f4f6;
            padding: 15px;
            border-radius: 8px;
            font-family: monospace;
            font-size: 18px;
            color: #374151;
            margin: 20px 0;
        }
        .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            color: #9ca3af;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon">‚úÖ</div>
        <h1>${title}</h1>
        <p>${message}</p>
        <div class="order-number">–ó–∞–∫–∞–∑ ‚Ññ${orderNumber}</div>
        <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.</p>
        <div class="footer">
            –≠—Ç–æ –æ–∫–Ω–æ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å
        </div>
    </div>
</body>
</html>
  `;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π
 * @param error - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 */
function generateErrorHTML(error: string) {
  return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #f87171 0%, #ef4444 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 500px;
            width: 100%;
        }
        .icon {
            font-size: 64px;
            margin-bottom: 20px;
            color: #ef4444;
        }
        h1 {
            color: #1f2937;
            margin-bottom: 10px;
            font-size: 24px;
        }
        p {
            color: #6b7280;
            font-size: 16px;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon">‚ùå</div>
        <h1>–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h1>
        <p>${error}</p>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.</p>
    </div>
</body>
</html>
  `;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram
 * @param order - –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
 */
async function sendTelegramConfirmation(order: any) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.log("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ chat ID");
      return { skipped: true, reason: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram" };
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    const message = `
‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–ª–∏–µ–Ω—Ç–æ–º!*

üìã *–ó–∞–∫–∞–∑ ‚Ññ${order.order_number || order.id}*
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${order.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.phone}
‚úâÔ∏è *Email:* ${order.email}
üè† *–ê–¥—Ä–µ—Å:* ${order.yandex_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* ${order.total} ‚ÇΩ
üí≥ *–û–ø–ª–∞—Ç–∞:* ${order.payment === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–º–∏' : '–ü–µ—Ä–µ–≤–æ–¥–æ–º'}
üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* ${order.delivery === 'delivery' ? '–ö—É—Ä—å–µ—Ä' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}

‚è∞ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU')}
    `;

    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –≤ Telegram API
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: "Markdown"
      })
    });
    
    const result = await response.json();
    
    if (!response.ok) {
      console.error("–û—à–∏–±–∫–∞ Telegram API:", result);
      return { error: `Telegram API –æ—à–∏–±–∫–∞: ${result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` };
    }
    
    console.log("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:", result);
    return { success: true, result };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    return { error: error.message };
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ Google Sheets —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param order - –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
async function updateGoogleSheets(order: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Google Sheets
    const googleScriptUrl = Deno.env.get("GOOGLE_SCRIPT_URL");
    const googleSheetsId = Deno.env.get("GOOGLE_SHEETS_ID");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (!googleScriptUrl || !googleSheetsId) {
      console.log("Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ ID —Ç–∞–±–ª–∏—Ü—ã");
      return { skipped: true, reason: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets" };
    }
    
    console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets...");
    console.log("Google Script URL:", googleScriptUrl);
    console.log("Google Sheets ID:", googleSheetsId);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets
    const sheetValues = [
      order.id,
      order.name || "",
      order.phone || "",
      order.email || "",
      order.yandex_address || "–ù–µ —É–∫–∞–∑–∞–Ω",
      order.payment || "–ù–µ —É–∫–∞–∑–∞–Ω",
      order.delivery || "–ù–µ —É–∫–∞–∑–∞–Ω",
      JSON.stringify(order.cart_items || []), // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ JSON –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
      order.subtotal || 0,
      order.discount || 0,
      order.total || 0,
      order.order_status || "confirmed",
      order.created_at || "",
      order.confirmed_at || new Date().toISOString() // –î–æ–±–∞–≤–ª—è–µ–º confirmed_at
    ];
    
    console.log("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets:", sheetValues);
    
    const requestBody = {
      sheetId: googleSheetsId,
      action: 'addOrUpdateOrder',
      orderData: sheetValues
    };
    
    console.log("–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", JSON.stringify(requestBody, null, 2));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –≤ Google Apps Script
    const response = await fetch(googleScriptUrl, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'User-Agent': 'Supabase-Edge-Function/1.0'
      },
      body: JSON.stringify(requestBody)
    });
    
    console.log("Google Sheets –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å:", response.status);
    console.log("Google Sheets –æ—Ç–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏:", Object.fromEntries(response.headers.entries()));
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Google Sheets HTTP –æ—à–∏–±–∫–∞ ${response.status}:`, errorText);
      return { 
        error: `HTTP ${response.status}: ${errorText}`,
        status: response.status,
        statusText: response.statusText
      };
    }
    
    const result = await response.json();
    console.log("Google Sheets —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", result);
    return { success: true, result };
    
  } catch (error) {
    console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Google Sheets:", error);
    console.error("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error.stack);
    return { 
      error: error.message,
      type: error.name,
      stack: error.stack
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
serve(async (req) => {
  console.log(`========== –ù–û–í–´–ô –ó–ê–ü–†–û–° ==========`);
  console.log(`–ú–µ—Ç–æ–¥: ${req.method}`);
  console.log(`URL: ${req.url}`);
  console.log(`–ó–∞–≥–æ–ª–æ–≤–∫–∏:`, Object.fromEntries(req.headers.entries()));
  console.log(`=====================================`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === "OPTIONS") {
    console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–∞");
    return new Response(null, { headers: corsHeaders });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–∑ email —Å—Å—ã–ª–æ–∫)
  if (req.method === "GET") {
    try {
      const url = new URL(req.url);
      const orderId = url.searchParams.get('order_id');
      
      console.log("=== GET –ó–ê–ü–†–û–° –ù–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===");
      console.log("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π order_id:", orderId);
      console.log("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL:", Object.fromEntries(url.searchParams.entries()));
      
      if (!orderId) {
        console.error("–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id –≤ GET –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö");
        return new Response(
          generateErrorHTML("ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Å—Å—ã–ª–∫–µ"),
          { 
            status: 400,
            headers: { "Content-Type": "text/html; charset=utf-8" }
          }
        );
      }
      
      console.log("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: order, error: fetchError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();
        
      console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:", { order, fetchError });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      if (fetchError || !order) {
        console.error("–û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:", fetchError);
        return new Response(
          generateErrorHTML("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"),
          { 
            status: 404,
            headers: { "Content-Type": "text/html; charset=utf-8" }
          }
        );
      }
      
      console.log("–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:", order);
      console.log("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", order.order_status);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ
      if (order.order_status === 'confirmed') {
        console.log("–ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:", order.id);
        return new Response(
          generateConfirmationHTML(order.order_number || order.id, true),
          { 
            headers: { "Content-Type": "text/html; charset=utf-8" }
          }
        );
      }
      
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ 'confirmed'...");
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "confirmed"
      const confirmedAt = new Date().toISOString();
      const { data: updatedOrder, error: updateError } = await supabase
        .from('orders')
        .update({ 
          order_status: 'confirmed',
          confirmed_at: confirmedAt
        })
        .eq('id', orderId)
        .select()
        .single();
        
      console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", { updatedOrder, updateError });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (updateError) {
        console.error("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑:", updateError);
        return new Response(
          generateErrorHTML("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"),
          { 
            status: 500,
            headers: { "Content-Type": "text/html; charset=utf-8" }
          }
        );
      }
      
      console.log("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:", updatedOrder);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
      Promise.allSettled([
        sendTelegramConfirmation(updatedOrder),
        updateGoogleSheets(updatedOrder)
      ]).then(results => {
        console.log("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===");
        results.forEach((result, index) => {
          const serviceName = index === 0 ? "Telegram" : "Google Sheets";
          if (result.status === 'fulfilled') {
            console.log(`${serviceName} - –£—Å–ø–µ—Ö:`, result.value);
          } else {
            console.error(`${serviceName} - –û—à–∏–±–∫–∞:`, result.reason);
          }
        });
        console.log("=== –ö–û–ù–ï–¶ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===");
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      return new Response(
        generateConfirmationHTML(updatedOrder.order_number || updatedOrder.id),
        { 
          headers: { "Content-Type": "text/html; charset=utf-8" }
        }
      );
      
    } catch (error) {
      console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ GET –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", error);
      console.error("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error.stack);
      return new Response(
        generateErrorHTML(`–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`),
        { 
          status: 500,
          headers: { "Content-Type": "text/html; charset=utf-8" }
        }
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  if (req.method === "POST") {
    try {
      console.log("=== POST –ó–ê–ü–†–û–° –ù–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===");
      
      // –ü–∞—Ä—Å–∏–º JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const requestBody = await req.json();
      const { orderId } = requestBody;
      
      console.log("POST –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏:", requestBody);
      console.log("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π orderId:", orderId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –∑–∞–∫–∞–∑–∞
      if (!orderId) {
        console.error("–û–®–ò–ë–ö–ê: orderId –Ω–µ —É–∫–∞–∑–∞–Ω –≤ POST –∑–∞–ø—Ä–æ—Å–µ");
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: "ID –∑–∞–∫–∞–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω" 
          }),
          { 
            status: 400,
            headers: { 
              "Content-Type": "application/json",
              ...corsHeaders
            } 
          }
        );
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: order, error: fetchError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();
        
      console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ POST:", { order, fetchError });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      if (fetchError || !order) {
        console.error("–û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ POST –∑–∞–ø—Ä–æ—Å–µ:", fetchError);
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" 
          }),
          { 
            status: 404,
            headers: { 
              "Content-Type": "application/json",
              ...corsHeaders
            } 
          }
        );
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ
      if (order.order_status === 'confirmed') {
        console.log("POST: –ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:", order.id);
        return new Response(
          JSON.stringify({ 
            success: true, 
            message: "–ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Ä–∞–Ω–µ–µ",
            order 
          }),
          { 
            headers: { 
              "Content-Type": "application/json",
              ...corsHeaders
            } 
          }
        );
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "confirmed"
      const { data: updatedOrder, error: updateError } = await supabase
        .from('orders')
        .update({ 
          order_status: 'confirmed',
          confirmed_at: new Date().toISOString()
        })
        .eq('id', orderId)
        .select()
        .single();
        
      console.log("POST: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", { updatedOrder, updateError });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (updateError) {
        console.error("POST: –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", updateError);
        return new Response(
          JSON.stringify({ 
            success: false, 
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞" 
          }),
          { 
            status: 500,
            headers: { 
              "Content-Type": "application/json",
              ...corsHeaders
            } 
          }
        );
      }
      
      console.log("POST: –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:", updatedOrder);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      Promise.allSettled([
        sendTelegramConfirmation(updatedOrder),
        updateGoogleSheets(updatedOrder)
      ]).then(results => {
        console.log("POST: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", 
          results.map((r, i) => `${i}: ${r.status === 'fulfilled' ? '—É—Å–ø–µ—Ö' : r.reason}`));
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
      return new Response(
        JSON.stringify({ 
          success: true, 
          message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
          order: updatedOrder 
        }),
        { 
          headers: { 
            "Content-Type": "application/json",
            ...corsHeaders
          } 
        }
      );
      
    } catch (error) {
      console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ POST –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", error);
      console.error("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error.stack);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: error.message 
        }),
        { 
          status: 500,
          headers: { 
            "Content-Type": "application/json",
            ...corsHeaders
          } 
        }
      );
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  console.log("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥:", req.method);
  return new Response(
    generateErrorHTML("–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"),
    { 
      status: 405,
      headers: { "Content-Type": "text/html; charset=utf-8" }
    }
  );
});
